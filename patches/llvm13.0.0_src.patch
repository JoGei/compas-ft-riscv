diff -ruN llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp llvm_new/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
--- llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp	2021-11-05 14:40:32.686014125 +0100
+++ llvm_new/lib/CodeGen/AsmPrinter/AsmPrinter.cpp	2021-11-05 14:39:13.361508638 +0100
@@ -879,18 +879,26 @@
   } else if ((Size = MI.getFoldedRestoreSize(TII))) {
     if (*Size) {
       if (*Size == unsigned(MemoryLocation::UnknownSize))
-        CommentOS << "Unknown-size Folded Reload\n";
+        if (MI.mayStore()) {
+          CommentOS << "Unknown-size Folded Reload\n";
+        }
       else
-        CommentOS << *Size << "-byte Folded Reload\n";
+        if (MI.mayStore()) {
+          CommentOS << *Size << "-byte Folded Reload\n";
+        }
     }
   } else if ((Size = MI.getSpillSize(TII))) {
     CommentOS << *Size << "-byte Spill\n";
   } else if ((Size = MI.getFoldedSpillSize(TII))) {
     if (*Size) {
       if (*Size == unsigned(MemoryLocation::UnknownSize))
-        CommentOS << "Unknown-size Folded Spill\n";
+        if (MI.mayStore()) {
+          CommentOS << "Unknown-size Folded Spill\n";
+        }
       else
-        CommentOS << *Size << "-byte Folded Spill\n";
+        if (MI.mayStore()) {
+          CommentOS << *Size << "-byte Folded Spill\n";
+        }
     }
   }
 
diff -ruN llvm/lib/Target/RISCV/CMakeLists.txt llvm_new/lib/Target/RISCV/CMakeLists.txt
--- llvm/lib/Target/RISCV/CMakeLists.txt	2021-11-05 14:40:32.770014660 +0100
+++ llvm_new/lib/Target/RISCV/CMakeLists.txt	2021-11-05 14:39:13.441509148 +0100
@@ -52,6 +52,9 @@
   Target
   GlobalISel
 
+  LINK_LIBS
+  Sihft
+
   ADD_TO_COMPONENT
   RISCV
   )
@@ -60,3 +63,4 @@
 add_subdirectory(Disassembler)
 add_subdirectory(MCTargetDesc)
 add_subdirectory(TargetInfo)
+add_subdirectory(compas-ft-riscv)
diff -ruN llvm/lib/Target/RISCV/RISCV.h llvm_new/lib/Target/RISCV/RISCV.h
--- llvm/lib/Target/RISCV/RISCV.h	2021-09-24 18:18:10.000000000 +0200
+++ /home/ga38qoh/filer/llvm-project-13.0.0.src/llvm/lib/Target/RISCV/RISCV.h	2021-12-16 09:05:02.036830000 +0100
@@ -15,8 +15,32 @@
 #define LLVM_LIB_TARGET_RISCV_RISCV_H
 
 #include "MCTargetDesc/RISCVBaseInfo.h"
+#include "llvm/Support/CommandLine.h"
 #include "llvm/Target/TargetMachine.h"
 
+namespace llvm::cl {
+inline opt<bool> reserve_rf{"RRF", desc("reserve half of RegFiles"),
+                            value_desc("pass")};
+inline opt<std::string> enable_cfcss{"CFCSS", desc("CFCSS pass for CFP"),
+                                     value_desc("pass")};
+inline opt<std::string> enable_rasm{"RASM", desc("RASM pass for CFP"),
+                                    value_desc("pass")};
+inline opt<std::string> enable_nzdc{"NZDC", desc("NZDC pass for DFP"),
+                                    value_desc("pass")};
+inline opt<std::string> enable_swift{"SWIFT", desc("SWIFT pass for DFP"),
+                                     value_desc("pass")};
+inline opt<std::string> enable_eddi{"EDDI", desc("EDDI pass for DFP"),
+                                    value_desc("pass")};
+inline opt<std::string> enable_fgs{
+    "FGS", desc("fine grain schedule for instr. DMR"), value_desc("pass")};
+inline opt<bool> enable_repair{"REPAIR", desc("REPAIR pass on top of DMR"),
+                               value_desc("pass")};
+}  // namespace llvm::cl
+
+namespace riscv_common {
+bool inCSString(std::string, std::string);
+}
+
 namespace llvm {
 class RISCVRegisterBankInfo;
 class RISCVSubtarget;
@@ -52,6 +76,10 @@
 InstructionSelector *createRISCVInstructionSelector(const RISCVTargetMachine &,
                                                     RISCVSubtarget &,
                                                     RISCVRegisterBankInfo &);
-}
+
+FunctionPass *createRISCVCfcss();
+FunctionPass *createRISCVRasm();
+FunctionPass *createRISCVDmr();
+}  // namespace llvm
 
 #endif

diff -ruN llvm/lib/Target/RISCV/RISCVRegisterInfo.cpp llvm_new/lib/Target/RISCV/RISCVRegisterInfo.cpp
--- llvm/lib/Target/RISCV/RISCVRegisterInfo.cpp	2021-09-24 18:18:10.000000000 +0200
+++ /home/ga38qoh/filer/llvm-project-13.0.0.src/llvm/lib/Target/RISCV/RISCVRegisterInfo.cpp	2021-12-16 10:35:54.288282000 +0100
@@ -11,6 +11,7 @@
 //===----------------------------------------------------------------------===//
 
 #include "RISCVRegisterInfo.h"
+
 #include "RISCV.h"
 #include "RISCVMachineFunctionInfo.h"
 #include "RISCVSubtarget.h"
@@ -42,34 +43,32 @@
 static_assert(RISCV::V31 == RISCV::V0 + 31, "Register list not consecutive");
 
 RISCVRegisterInfo::RISCVRegisterInfo(unsigned HwMode)
-    : RISCVGenRegisterInfo(RISCV::X1, /*DwarfFlavour*/0, /*EHFlavor*/0,
-                           /*PC*/0, HwMode) {}
+    : RISCVGenRegisterInfo(RISCV::X1, /*DwarfFlavour*/ 0, /*EHFlavor*/ 0,
+                           /*PC*/ 0, HwMode) {}
 
-const MCPhysReg *
-RISCVRegisterInfo::getCalleeSavedRegs(const MachineFunction *MF) const {
+const MCPhysReg *RISCVRegisterInfo::getCalleeSavedRegs(
+    const MachineFunction *MF) const {
   auto &Subtarget = MF->getSubtarget<RISCVSubtarget>();
   if (MF->getFunction().getCallingConv() == CallingConv::GHC)
     return CSR_NoRegs_SaveList;
   if (MF->getFunction().hasFnAttribute("interrupt")) {
-    if (Subtarget.hasStdExtD())
-      return CSR_XLEN_F64_Interrupt_SaveList;
-    if (Subtarget.hasStdExtF())
-      return CSR_XLEN_F32_Interrupt_SaveList;
+    if (Subtarget.hasStdExtD()) return CSR_XLEN_F64_Interrupt_SaveList;
+    if (Subtarget.hasStdExtF()) return CSR_XLEN_F32_Interrupt_SaveList;
     return CSR_Interrupt_SaveList;
   }
 
   switch (Subtarget.getTargetABI()) {
-  default:
-    llvm_unreachable("Unrecognized ABI");
-  case RISCVABI::ABI_ILP32:
-  case RISCVABI::ABI_LP64:
-    return CSR_ILP32_LP64_SaveList;
-  case RISCVABI::ABI_ILP32F:
-  case RISCVABI::ABI_LP64F:
-    return CSR_ILP32F_LP64F_SaveList;
-  case RISCVABI::ABI_ILP32D:
-  case RISCVABI::ABI_LP64D:
-    return CSR_ILP32D_LP64D_SaveList;
+    default:
+      llvm_unreachable("Unrecognized ABI");
+    case RISCVABI::ABI_ILP32:
+    case RISCVABI::ABI_LP64:
+      return CSR_ILP32_LP64_SaveList;
+    case RISCVABI::ABI_ILP32F:
+    case RISCVABI::ABI_LP64F:
+      return CSR_ILP32F_LP64F_SaveList;
+    case RISCVABI::ABI_ILP32D:
+    case RISCVABI::ABI_LP64D:
+      return CSR_ILP32D_LP64D_SaveList;
   }
 }
 
@@ -84,16 +83,14 @@
   }
 
   // Use markSuperRegs to ensure any register aliases are also reserved
-  markSuperRegs(Reserved, RISCV::X0); // zero
-  markSuperRegs(Reserved, RISCV::X2); // sp
-  markSuperRegs(Reserved, RISCV::X3); // gp
-  markSuperRegs(Reserved, RISCV::X4); // tp
-  if (TFI->hasFP(MF))
-    markSuperRegs(Reserved, RISCV::X8); // fp
+  markSuperRegs(Reserved, RISCV::X0);                      // zero
+  markSuperRegs(Reserved, RISCV::X2);                      // sp
+  markSuperRegs(Reserved, RISCV::X3);                      // gp
+  markSuperRegs(Reserved, RISCV::X4);                      // tp
+  if (TFI->hasFP(MF)) markSuperRegs(Reserved, RISCV::X8);  // fp
   // Reserve the base register if we need to realign the stack and allocate
   // variable-sized objects at runtime.
-  if (TFI->hasBP(MF))
-    markSuperRegs(Reserved, RISCVABI::getBPReg()); // bp
+  if (TFI->hasBP(MF)) markSuperRegs(Reserved, RISCVABI::getBPReg());  // bp
 
   // V registers for code generation. We handle them manually.
   markSuperRegs(Reserved, RISCV::VL);
@@ -106,6 +103,97 @@
   markSuperRegs(Reserved, RISCV::FFLAGS);
   markSuperRegs(Reserved, RISCV::FCSR);
 
+  if (riscv_common::inCSString(llvm::cl::enable_cfcss,
+                               std::string{MF.getName()}) ||
+      riscv_common::inCSString(llvm::cl::enable_rasm,
+                               std::string{MF.getName()})) {
+    markSuperRegs(Reserved, RISCV::X5);
+    markSuperRegs(Reserved, RISCV::X29);
+  }
+
+  // DMR passes -> have to reserve half of reg file
+  if (llvm::cl::reserve_rf ||
+      riscv_common::inCSString(llvm::cl::enable_nzdc,
+                               std::string{MF.getName()}) ||
+      riscv_common::inCSString(llvm::cl::enable_swift,
+                               std::string{MF.getName()}) ||
+      riscv_common::inCSString(llvm::cl::enable_eddi,
+                               std::string{MF.getName()})) {
+    // these are availale for FP DMR purposes alongwith their shadows
+    markSuperRegs(Reserved, RISCV::F8_F);
+    markSuperRegs(Reserved, RISCV::F8_D);
+    markSuperRegs(Reserved, RISCV::F8_H);
+
+    // half of each regfile is reserved
+    markSuperRegs(Reserved, RISCV::X7);
+    markSuperRegs(Reserved, RISCV::X9);
+    markSuperRegs(Reserved, RISCV::X18);
+    markSuperRegs(Reserved, RISCV::X19);
+    markSuperRegs(Reserved, RISCV::X20);
+    markSuperRegs(Reserved, RISCV::X21);
+    markSuperRegs(Reserved, RISCV::X22);
+    markSuperRegs(Reserved, RISCV::X23);
+    markSuperRegs(Reserved, RISCV::X24);
+    markSuperRegs(Reserved, RISCV::X25);
+    markSuperRegs(Reserved, RISCV::X26);
+    markSuperRegs(Reserved, RISCV::X27);
+    markSuperRegs(Reserved, RISCV::X28);
+    markSuperRegs(Reserved, RISCV::X29);
+    markSuperRegs(Reserved, RISCV::X30);
+    markSuperRegs(Reserved, RISCV::X31);
+
+    markSuperRegs(Reserved, RISCV::F7_F);
+    markSuperRegs(Reserved, RISCV::F9_F);
+    markSuperRegs(Reserved, RISCV::F18_F);
+    markSuperRegs(Reserved, RISCV::F19_F);
+    markSuperRegs(Reserved, RISCV::F20_F);
+    markSuperRegs(Reserved, RISCV::F21_F);
+    markSuperRegs(Reserved, RISCV::F22_F);
+    markSuperRegs(Reserved, RISCV::F23_F);
+    markSuperRegs(Reserved, RISCV::F24_F);
+    markSuperRegs(Reserved, RISCV::F25_F);
+    markSuperRegs(Reserved, RISCV::F26_F);
+    markSuperRegs(Reserved, RISCV::F27_F);
+    markSuperRegs(Reserved, RISCV::F28_F);
+    markSuperRegs(Reserved, RISCV::F29_F);
+    markSuperRegs(Reserved, RISCV::F30_F);
+    markSuperRegs(Reserved, RISCV::F31_F);
+
+    markSuperRegs(Reserved, RISCV::F7_D);
+    markSuperRegs(Reserved, RISCV::F9_D);
+    markSuperRegs(Reserved, RISCV::F18_D);
+    markSuperRegs(Reserved, RISCV::F19_D);
+    markSuperRegs(Reserved, RISCV::F20_D);
+    markSuperRegs(Reserved, RISCV::F21_D);
+    markSuperRegs(Reserved, RISCV::F22_D);
+    markSuperRegs(Reserved, RISCV::F23_D);
+    markSuperRegs(Reserved, RISCV::F24_D);
+    markSuperRegs(Reserved, RISCV::F25_D);
+    markSuperRegs(Reserved, RISCV::F26_D);
+    markSuperRegs(Reserved, RISCV::F27_D);
+    markSuperRegs(Reserved, RISCV::F28_D);
+    markSuperRegs(Reserved, RISCV::F29_D);
+    markSuperRegs(Reserved, RISCV::F30_D);
+    markSuperRegs(Reserved, RISCV::F31_D);
+
+    markSuperRegs(Reserved, RISCV::F7_H);
+    markSuperRegs(Reserved, RISCV::F9_H);
+    markSuperRegs(Reserved, RISCV::F18_H);
+    markSuperRegs(Reserved, RISCV::F19_H);
+    markSuperRegs(Reserved, RISCV::F20_H);
+    markSuperRegs(Reserved, RISCV::F21_H);
+    markSuperRegs(Reserved, RISCV::F22_H);
+    markSuperRegs(Reserved, RISCV::F23_H);
+    markSuperRegs(Reserved, RISCV::F24_H);
+    markSuperRegs(Reserved, RISCV::F25_H);
+    markSuperRegs(Reserved, RISCV::F26_H);
+    markSuperRegs(Reserved, RISCV::F27_H);
+    markSuperRegs(Reserved, RISCV::F28_H);
+    markSuperRegs(Reserved, RISCV::F29_H);
+    markSuperRegs(Reserved, RISCV::F30_H);
+    markSuperRegs(Reserved, RISCV::F31_H);
+  }
+
   assert(checkAllSuperRegsMarked(Reserved));
   return Reserved;
 }
@@ -126,31 +214,22 @@
 // Frame indexes representing locations of CSRs which are given a fixed location
 // by save/restore libcalls.
 static const std::map<unsigned, int> FixedCSRFIMap = {
-  {/*ra*/  RISCV::X1,   -1},
-  {/*s0*/  RISCV::X8,   -2},
-  {/*s1*/  RISCV::X9,   -3},
-  {/*s2*/  RISCV::X18,  -4},
-  {/*s3*/  RISCV::X19,  -5},
-  {/*s4*/  RISCV::X20,  -6},
-  {/*s5*/  RISCV::X21,  -7},
-  {/*s6*/  RISCV::X22,  -8},
-  {/*s7*/  RISCV::X23,  -9},
-  {/*s8*/  RISCV::X24,  -10},
-  {/*s9*/  RISCV::X25,  -11},
-  {/*s10*/ RISCV::X26,  -12},
-  {/*s11*/ RISCV::X27,  -13}
-};
+    {/*ra*/ RISCV::X1, -1},   {/*s0*/ RISCV::X8, -2},
+    {/*s1*/ RISCV::X9, -3},   {/*s2*/ RISCV::X18, -4},
+    {/*s3*/ RISCV::X19, -5},  {/*s4*/ RISCV::X20, -6},
+    {/*s5*/ RISCV::X21, -7},  {/*s6*/ RISCV::X22, -8},
+    {/*s7*/ RISCV::X23, -9},  {/*s8*/ RISCV::X24, -10},
+    {/*s9*/ RISCV::X25, -11}, {/*s10*/ RISCV::X26, -12},
+    {/*s11*/ RISCV::X27, -13}};
 
 bool RISCVRegisterInfo::hasReservedSpillSlot(const MachineFunction &MF,
                                              Register Reg,
                                              int &FrameIdx) const {
   const auto *RVFI = MF.getInfo<RISCVMachineFunctionInfo>();
-  if (!RVFI->useSaveRestoreLibCalls(MF))
-    return false;
+  if (!RVFI->useSaveRestoreLibCalls(MF)) return false;
 
   auto FII = FixedCSRFIMap.find(Reg);
-  if (FII == FixedCSRFIMap.end())
-    return false;
+  if (FII == FixedCSRFIMap.end()) return false;
 
   FrameIdx = FII->second;
   return true;
@@ -208,8 +287,8 @@
     TII->movImm(MBB, II, DL, ScratchReg, Offset.getFixed());
     if (MI.getOpcode() == RISCV::ADDI && !Offset.getScalable()) {
       BuildMI(MBB, II, DL, TII->get(RISCV::ADD), MI.getOperand(0).getReg())
-        .addReg(FrameReg)
-        .addReg(ScratchReg, RegState::Kill);
+          .addReg(FrameReg)
+          .addReg(ScratchReg, RegState::Kill);
       MI.eraseFromParent();
       return;
     }
@@ -231,10 +310,10 @@
       if (Offset.getFixed()) {
         Register ScratchReg = MRI.createVirtualRegister(&RISCV::GPRRegClass);
         BuildMI(MBB, II, DL, TII->get(RISCV::ADDI), ScratchReg)
-          .addReg(FrameReg, getKillRegState(FrameRegIsKill))
-          .addImm(Offset.getFixed());
+            .addReg(FrameReg, getKillRegState(FrameRegIsKill))
+            .addImm(Offset.getFixed());
         MI.getOperand(FIOperandNum)
-          .ChangeToRegister(ScratchReg, false, false, true);
+            .ChangeToRegister(ScratchReg, false, false, true);
       }
     }
   } else {
@@ -291,32 +370,28 @@
   return TFI->hasFP(MF) ? RISCV::X8 : RISCV::X2;
 }
 
-const uint32_t *
-RISCVRegisterInfo::getCallPreservedMask(const MachineFunction & MF,
-                                        CallingConv::ID CC) const {
+const uint32_t *RISCVRegisterInfo::getCallPreservedMask(
+    const MachineFunction &MF, CallingConv::ID CC) const {
   auto &Subtarget = MF.getSubtarget<RISCVSubtarget>();
 
-  if (CC == CallingConv::GHC)
-    return CSR_NoRegs_RegMask;
+  if (CC == CallingConv::GHC) return CSR_NoRegs_RegMask;
   switch (Subtarget.getTargetABI()) {
-  default:
-    llvm_unreachable("Unrecognized ABI");
-  case RISCVABI::ABI_ILP32:
-  case RISCVABI::ABI_LP64:
-    return CSR_ILP32_LP64_RegMask;
-  case RISCVABI::ABI_ILP32F:
-  case RISCVABI::ABI_LP64F:
-    return CSR_ILP32F_LP64F_RegMask;
-  case RISCVABI::ABI_ILP32D:
-  case RISCVABI::ABI_LP64D:
-    return CSR_ILP32D_LP64D_RegMask;
+    default:
+      llvm_unreachable("Unrecognized ABI");
+    case RISCVABI::ABI_ILP32:
+    case RISCVABI::ABI_LP64:
+      return CSR_ILP32_LP64_RegMask;
+    case RISCVABI::ABI_ILP32F:
+    case RISCVABI::ABI_LP64F:
+      return CSR_ILP32F_LP64F_RegMask;
+    case RISCVABI::ABI_ILP32D:
+    case RISCVABI::ABI_LP64D:
+      return CSR_ILP32D_LP64D_RegMask;
   }
 }
 
-const TargetRegisterClass *
-RISCVRegisterInfo::getLargestLegalSuperClass(const TargetRegisterClass *RC,
-                                             const MachineFunction &) const {
-  if (RC == &RISCV::VMV0RegClass)
-    return &RISCV::VRRegClass;
+const TargetRegisterClass *RISCVRegisterInfo::getLargestLegalSuperClass(
+    const TargetRegisterClass *RC, const MachineFunction &) const {
+  if (RC == &RISCV::VMV0RegClass) return &RISCV::VRRegClass;
   return RC;
 }


diff -ruN llvm/lib/Target/RISCV/RISCVTargetMachine.cpp llvm_new/lib/Target/RISCV/RISCVTargetMachine.cpp
--- llvm/lib/Target/RISCV/RISCVTargetMachine.cpp	2021-11-05 14:40:32.770014660 +0100
+++ llvm_new/lib/Target/RISCV/RISCVTargetMachine.cpp	2021-11-05 14:39:13.441509148 +0100
@@ -188,6 +188,10 @@
   // possibility for other passes to break the requirements for forward
   // progress in the LR/SC block.
   addPass(createRISCVExpandAtomicPseudoPass());
+  
+  addPass(createRISCVDmr());
+  addPass(createRISCVCfcss());
+  addPass(createRISCVRasm());
 }
 
 void RISCVPassConfig::addPreRegAlloc() {
