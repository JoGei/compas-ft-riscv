From 78a4d6c810b7cb3444fd89ddacdc41a7cc5d47e1 Mon Sep 17 00:00:00 2001
From: ga38qoh <uzair.sharif@tum.de>
Date: Tue, 19 Oct 2021 15:57:31 +0200
Subject: [PATCH] llvm-13.0.0 patch

---
 llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp   | 17 ++--
 llvm/lib/Target/RISCV/CMakeLists.txt         |  4 +
 llvm/lib/Target/RISCV/RISCV.h                | 25 ++++++
 llvm/lib/Target/RISCV/RISCVRegisterInfo.cpp  | 88 ++++++++++++++++++++
 llvm/lib/Target/RISCV/RISCVTargetMachine.cpp |  4 +
 5 files changed, 133 insertions(+), 5 deletions(-)

diff --git a/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp b/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
index e528d33b5f8c..cb7c158d2c6b 100644
--- a/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
+++ b/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
@@ -884,13 +884,20 @@ static void emitComments(const MachineInstr &MI, raw_ostream &CommentOS) {
         CommentOS << *Size << "-byte Folded Reload\n";
     }
   } else if ((Size = MI.getSpillSize(TII))) {
-    CommentOS << *Size << "-byte Spill\n";
+    if (MI.mayStore()) {
+      CommentOS << *Size << "-byte Spill\n";
+    }
   } else if ((Size = MI.getFoldedSpillSize(TII))) {
     if (*Size) {
-      if (*Size == unsigned(MemoryLocation::UnknownSize))
-        CommentOS << "Unknown-size Folded Spill\n";
-      else
-        CommentOS << *Size << "-byte Folded Spill\n";
+      if (*Size == unsigned(MemoryLocation::UnknownSize)) {
+        if (MI.mayStore()) {
+          CommentOS << "Unknown-size Folded Spill\n";
+        }
+      } else {
+        if (MI.mayStore()) {
+          CommentOS << *Size << "-byte Folded Spill\n";
+        }
+      }
     }
   }
 
diff --git a/llvm/lib/Target/RISCV/CMakeLists.txt b/llvm/lib/Target/RISCV/CMakeLists.txt
index 961781bec193..998ab604c597 100644
--- a/llvm/lib/Target/RISCV/CMakeLists.txt
+++ b/llvm/lib/Target/RISCV/CMakeLists.txt
@@ -52,6 +52,9 @@ add_llvm_target(RISCVCodeGen
   Target
   GlobalISel
 
+  LINK_LIBS
+  RISCVSIHFT
+
   ADD_TO_COMPONENT
   RISCV
   )
@@ -60,3 +63,4 @@ add_subdirectory(AsmParser)
 add_subdirectory(Disassembler)
 add_subdirectory(MCTargetDesc)
 add_subdirectory(TargetInfo)
+add_subdirectory(machinefuncpasssihfts/riscv)
diff --git a/llvm/lib/Target/RISCV/RISCV.h b/llvm/lib/Target/RISCV/RISCV.h
index ef1f97067e12..bf0e18c368ae 100644
--- a/llvm/lib/Target/RISCV/RISCV.h
+++ b/llvm/lib/Target/RISCV/RISCV.h
@@ -16,6 +16,27 @@
 
 #include "MCTargetDesc/RISCVBaseInfo.h"
 #include "llvm/Target/TargetMachine.h"
+#include "llvm/Support/CommandLine.h"
+
+namespace llvm::cl {
+inline opt<bool> reserve_rf{"RRF", desc("reserve half of RegFiles"),
+                            value_desc("pass")};
+
+inline opt<std::string> enable_cfcss{"CFCSS", desc("CFCSS pass for CFP"),
+                                     value_desc("pass")};
+inline opt<std::string> enable_rasm{"RASM", desc("RASM pass for CFP"),
+                                    value_desc("pass")};
+inline opt<std::string> enable_nzdc{"NZDC", desc("NZDC pass for DFP"),
+                                    value_desc("pass")};
+inline opt<std::string> enable_fgs{
+    "FGS", desc("fine grain schedule for instr. DMR"), value_desc("pass")};
+inline opt<bool> enable_repair{"REPAIR", desc("REPAIR pass on top of DMR"),
+                               value_desc("pass")};
+}  // namespace llvm::cl
+
+namespace riscv_common {
+bool inCSString(std::string, std::string);
+}
 
 namespace llvm {
 class RISCVRegisterBankInfo;
@@ -49,6 +70,10 @@ void initializeRISCVExpandAtomicPseudoPass(PassRegistry &);
 FunctionPass *createRISCVInsertVSETVLIPass();
 void initializeRISCVInsertVSETVLIPass(PassRegistry &);
 
+FunctionPass *createRISCVCfcss();
+FunctionPass *createRISCVRasm();
+FunctionPass *createRISCVDmr();
+
 InstructionSelector *createRISCVInstructionSelector(const RISCVTargetMachine &,
                                                     RISCVSubtarget &,
                                                     RISCVRegisterBankInfo &);
diff --git a/llvm/lib/Target/RISCV/RISCVRegisterInfo.cpp b/llvm/lib/Target/RISCV/RISCVRegisterInfo.cpp
index 388cce00bdf3..108445686d95 100644
--- a/llvm/lib/Target/RISCV/RISCVRegisterInfo.cpp
+++ b/llvm/lib/Target/RISCV/RISCVRegisterInfo.cpp
@@ -105,6 +105,94 @@ BitVector RISCVRegisterInfo::getReservedRegs(const MachineFunction &MF) const {
   markSuperRegs(Reserved, RISCV::FRM);
   markSuperRegs(Reserved, RISCV::FFLAGS);
   markSuperRegs(Reserved, RISCV::FCSR);
+  
+  
+  if (riscv_common::inCSString(llvm::cl::enable_cfcss,
+                               std::string{MF.getName()}) ||
+      riscv_common::inCSString(llvm::cl::enable_rasm,
+                               std::string{MF.getName()})) {
+    markSuperRegs(Reserved, RISCV::X5);
+    markSuperRegs(Reserved, RISCV::X29);
+  }
+
+  // DMR passes -> have to reserve half of reg file
+  if (llvm::cl::reserve_rf ||
+      riscv_common::inCSString(llvm::cl::enable_nzdc,
+                               std::string{MF.getName()})) {
+    // these are availale for FP DMR purposes alongwith their shadows
+    markSuperRegs(Reserved, RISCV::F8_F);
+    markSuperRegs(Reserved, RISCV::F8_D);
+    markSuperRegs(Reserved, RISCV::F8_H);
+
+    // half of each regfile is reserved
+    markSuperRegs(Reserved, RISCV::X7);
+    markSuperRegs(Reserved, RISCV::X9);
+    markSuperRegs(Reserved, RISCV::X18);
+    markSuperRegs(Reserved, RISCV::X19);
+    markSuperRegs(Reserved, RISCV::X20);
+    markSuperRegs(Reserved, RISCV::X21);
+    markSuperRegs(Reserved, RISCV::X22);
+    markSuperRegs(Reserved, RISCV::X23);
+    markSuperRegs(Reserved, RISCV::X24);
+    markSuperRegs(Reserved, RISCV::X25);
+    markSuperRegs(Reserved, RISCV::X26);
+    markSuperRegs(Reserved, RISCV::X27);
+    markSuperRegs(Reserved, RISCV::X28);
+    markSuperRegs(Reserved, RISCV::X29);
+    markSuperRegs(Reserved, RISCV::X30);
+    markSuperRegs(Reserved, RISCV::X31);
+
+    markSuperRegs(Reserved, RISCV::F7_F);
+    markSuperRegs(Reserved, RISCV::F9_F);
+    markSuperRegs(Reserved, RISCV::F18_F);
+    markSuperRegs(Reserved, RISCV::F19_F);
+    markSuperRegs(Reserved, RISCV::F20_F);
+    markSuperRegs(Reserved, RISCV::F21_F);
+    markSuperRegs(Reserved, RISCV::F22_F);
+    markSuperRegs(Reserved, RISCV::F23_F);
+    markSuperRegs(Reserved, RISCV::F24_F);
+    markSuperRegs(Reserved, RISCV::F25_F);
+    markSuperRegs(Reserved, RISCV::F26_F);
+    markSuperRegs(Reserved, RISCV::F27_F);
+    markSuperRegs(Reserved, RISCV::F28_F);
+    markSuperRegs(Reserved, RISCV::F29_F);
+    markSuperRegs(Reserved, RISCV::F30_F);
+    markSuperRegs(Reserved, RISCV::F31_F);
+
+    markSuperRegs(Reserved, RISCV::F7_D);
+    markSuperRegs(Reserved, RISCV::F9_D);
+    markSuperRegs(Reserved, RISCV::F18_D);
+    markSuperRegs(Reserved, RISCV::F19_D);
+    markSuperRegs(Reserved, RISCV::F20_D);
+    markSuperRegs(Reserved, RISCV::F21_D);
+    markSuperRegs(Reserved, RISCV::F22_D);
+    markSuperRegs(Reserved, RISCV::F23_D);
+    markSuperRegs(Reserved, RISCV::F24_D);
+    markSuperRegs(Reserved, RISCV::F25_D);
+    markSuperRegs(Reserved, RISCV::F26_D);
+    markSuperRegs(Reserved, RISCV::F27_D);
+    markSuperRegs(Reserved, RISCV::F28_D);
+    markSuperRegs(Reserved, RISCV::F29_D);
+    markSuperRegs(Reserved, RISCV::F30_D);
+    markSuperRegs(Reserved, RISCV::F31_D);
+
+    markSuperRegs(Reserved, RISCV::F7_H);
+    markSuperRegs(Reserved, RISCV::F9_H);
+    markSuperRegs(Reserved, RISCV::F18_H);
+    markSuperRegs(Reserved, RISCV::F19_H);
+    markSuperRegs(Reserved, RISCV::F20_H);
+    markSuperRegs(Reserved, RISCV::F21_H);
+    markSuperRegs(Reserved, RISCV::F22_H);
+    markSuperRegs(Reserved, RISCV::F23_H);
+    markSuperRegs(Reserved, RISCV::F24_H);
+    markSuperRegs(Reserved, RISCV::F25_H);
+    markSuperRegs(Reserved, RISCV::F26_H);
+    markSuperRegs(Reserved, RISCV::F27_H);
+    markSuperRegs(Reserved, RISCV::F28_H);
+    markSuperRegs(Reserved, RISCV::F29_H);
+    markSuperRegs(Reserved, RISCV::F30_H);
+    markSuperRegs(Reserved, RISCV::F31_H);
+  }
 
   assert(checkAllSuperRegsMarked(Reserved));
   return Reserved;
diff --git a/llvm/lib/Target/RISCV/RISCVTargetMachine.cpp b/llvm/lib/Target/RISCV/RISCVTargetMachine.cpp
index b18ee6009217..ffa57572c226 100644
--- a/llvm/lib/Target/RISCV/RISCVTargetMachine.cpp
+++ b/llvm/lib/Target/RISCV/RISCVTargetMachine.cpp
@@ -188,6 +188,10 @@ void RISCVPassConfig::addPreEmitPass2() {
   // possibility for other passes to break the requirements for forward
   // progress in the LR/SC block.
   addPass(createRISCVExpandAtomicPseudoPass());
+
+  addPass(createRISCVDmr());
+  addPass(createRISCVCfcss());
+  addPass(createRISCVRasm());
 }
 
 void RISCVPassConfig::addPreRegAlloc() {
-- 
2.17.1

